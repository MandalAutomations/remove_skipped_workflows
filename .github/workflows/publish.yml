name: Publish .NET Package

on:
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Package version (e.g., 1.0.3)'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
      
      - name: Get latest package version and increment patch
        id: get-version
        run: |
          PACKAGE_NAME="octo-test"
          OWNER="${{ github.repository_owner }}"
          TOKEN="${{ secrets.GITHUB_TOKEN }}"

          response=$(curl -s -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/orgs/$OWNER/packages/nuget/$PACKAGE_NAME/versions")

          # Check if response is an array or object
          if echo "$response" | jq -e 'type == "array"' > /dev/null; then
            latest_version=$(echo "$response" | jq -r '.[0].name')
          elif echo "$response" | jq -e 'type == "object"' > /dev/null; then
            latest_version=$(echo "$response" | jq -r '.name')
          else
            latest_version=""
          fi

          echo "Latest version: $latest_version"

          if [[ "$latest_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IFS='.' read -r major minor patch <<< "$latest_version"
            patch=$((patch + 1))
            new_version="${major}.${minor}.${patch}"
          else
            new_version="1.0.0"
          fi

          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Pack with version ${{ inputs.package_version }}
        run: dotnet pack --configuration Release --no-build --output ./nupkg /p:PackageVersion=${{ inputs.package_version }}

    #   - name: Add GitHub Packages source
    #     run: dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --name "github" --username "${{ github.actor }}" --password "${{ secrets.GITHUB_TOKEN }}" --store-password-in-clear-text
      - name: Pack with version ${{ steps.get-version.outputs.new_version }}
        run: dotnet pack --configuration Release --no-build --output ./nupkg /p:PackageVersion=${{ steps.get-version.outputs.new_version }}

      - name: Publish to GitHub Packages
        run: dotnet nuget push "./nupkg/*.nupkg" --source "github" --api-key "${{ secrets.GITHUB_TOKEN }}" --skip-duplicate
